{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","react_default","a","createElement","Form","_ref","getWeather","onSubmit","type","name","placeholder","Weather","temperature","city","country","humidity","description","error","apiKey","App","state","undefined","_callee","e","url","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","concat","fetch","then","res","json","sent","_this","setState","main","temp","sys","weather","stop","this","components_Titles","components_Form","components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1dc8ae97.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = props => (\r\n    <div>\r\n        <h1>Weather Finder</h1>\r\n        <p>Find out temperature, conditions and more...</p>\r\n    </div>\r\n);\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\nconst Form = ({getWeather}) => (\r\n  <form onSubmit={getWeather}>\r\n    <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n    <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n    <button>Get Weather</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = ({\r\n  temperature,\r\n  city,\r\n  country,\r\n  humidity,\r\n  description,\r\n  error\r\n}) => (\r\n  <div>\r\n    {city && country && (\r\n      <div>\r\n        <p>\r\n          Location: {city},{country}\r\n        </p>\r\n        <p>Temperatur: {temperature}</p>\r\n        <p>Humidity: {humidity}</p>\r\n        <p>Conditions: {description}</p>\r\n      </div>\r\n    )}\r\n    {error && <p> {error}</p>}\r\n  </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\r\nimport Titles from \"./components/Titles\";\r\nimport Form from \"./components/Form\";\r\nimport Weather from \"./components/Weather\";\r\n\r\nconst apiKey = \"e790864e1d4f0499ba53a2a1464d123f\";\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    temperature: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    error: undefined\r\n  };\r\n\r\n  getWeather = async e => {\r\n    e.preventDefault();\r\n\r\n    // get the inputs\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n\r\n    const url = `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}&units=metric`;\r\n\r\n    // get the data from the api\r\n    const data = await fetch(url).then(res => res.json());\r\n\r\n    if (city && country) {\r\n      // update the states\r\n      this.setState({\r\n        temperature: data.main.temp,\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        humidity: data.main.humidity,\r\n        description: data.weather[0].description\r\n      });\r\n    } else {\r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: \"please enter the values\"\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { getWeather, state } = this;\r\n    const { temperature, city, country, humidity, description, error } = state;\r\n\r\n    return (\r\n      <div>\r\n        <Titles />\r\n        <Form getWeather={getWeather} />\r\n        <Weather\r\n          temperature={temperature}\r\n          city={city}\r\n          country={country}\r\n          humidity={humidity}\r\n          description={description}\r\n          error={error}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}