{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","react_default","a","createElement","className","Form","_ref","getWeather","onSubmit","type","name","placeholder","Weather","temperature","city","country","humidity","description","error","getDegree","degree","onClick","apiKey","App","state","undefined","_this","setState","_callee","e","url","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","concat","fetch","then","res","json","sent","main","temp","sys","weather","stop","this","components_Titles","components_Form","components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a62f9c07.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = props => (\r\n  <div>\r\n    <h1 className=\"title-container__title\">Weather Finder</h1>\r\n    <p className=\"title-container__subtitle\">Find out temperature, conditions and more...</p>\r\n  </div>\r\n);\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\nconst Form = ({getWeather}) => (\r\n  <form onSubmit={getWeather}>\r\n    <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n    <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n    <button>Get Weather</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = ({\r\n  temperature,\r\n  city,\r\n  country,\r\n  humidity,\r\n  description,\r\n  error,\r\n  getDegree,\r\n  degree\r\n}) => (\r\n  <div className=\"weather__info\">\r\n    {city && country && (\r\n      <p className=\"weather__key\">\r\n        Location:{\" \"}\r\n        <span className=\"weather__value\">\r\n          {city},{country}\r\n        </span>\r\n      </p>\r\n    )}\r\n    {temperature && (\r\n      <p className=\"weather__key\">\r\n        Temperatur:{\" \"}\r\n        <span className=\"weather__value degree-section\" onClick={getDegree}>\r\n          {temperature}\r\n          <span className=\"degree\">{degree}</span>\r\n        </span>\r\n      </p>\r\n    )}\r\n    {humidity && (\r\n      <p className=\"weather__key\">\r\n        Humidity: <span className=\"weather__value\"> {humidity}</span>\r\n      </p>\r\n    )}\r\n    {description && (\r\n      <p className=\"weather__key\">\r\n        Description: <span className=\"weather__value\"> {description}</span>\r\n      </p>\r\n    )}\r\n    {error && (\r\n      <p className=\"weather__error\">\r\n        Error: <span className=\"weather__value\"> {error}</span>\r\n      </p>\r\n    )}\r\n  </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\r\nimport Titles from \"./components/Titles\";\r\nimport Form from \"./components/Form\";\r\nimport Weather from \"./components/Weather\";\r\n\r\nconst apiKey = \"e790864e1d4f0499ba53a2a1464d123f\";\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    temperature: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    error: undefined,\r\n    degree: \"C\"\r\n  };\r\n\r\n  getDegree = () => {\r\n    let degree = this.state.degree === \"F\" ? \"C\" : \"F\";\r\n    let temperature = this.state.temperature;\r\n    temperature =\r\n      degree === \"F\"\r\n        ? temperature * (9 / 5) + 32\r\n        : (temperature - 32) / (9 / 5);\r\n\r\n    this.setState({ degree, temperature });\r\n  };\r\n\r\n  getWeather = async e => {\r\n    e.preventDefault();\r\n\r\n    // get the inputs\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}&units=metric`;\r\n\r\n    // get the data from the api\r\n    const data = await fetch(url).then(res => res.json());\r\n\r\n    if (city && country) {\r\n      // update the states\r\n      this.setState({\r\n        temperature: data.main.temp,\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        humidity: data.main.humidity,\r\n        description: data.weather[0].description\r\n      });\r\n    } else {\r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: \"please enter the values\"\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { getWeather, state, getDegree } = this;\r\n    const {\r\n      temperature,\r\n      city,\r\n      country,\r\n      humidity,\r\n      description,\r\n      error,\r\n      degree\r\n    } = state;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"wrapper\">\r\n          <div className=\"main\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-sx-5 title-container\">\r\n                  <Titles />\r\n                </div>\r\n                <div className=\"col-sx-7 form-container\">\r\n                  <Form getWeather={getWeather} />\r\n                  <Weather\r\n                    getDegree={getDegree}\r\n                    temperature={temperature}\r\n                    city={city}\r\n                    country={country}\r\n                    humidity={humidity}\r\n                    description={description}\r\n                    error={error}\r\n                    degree={degree}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}